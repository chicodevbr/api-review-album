{
  "swagger": "2.0",
  "info": {
    "version": "1.1.3",
    "title": "Album Review API",
    "description": "Welcome to Album Review API"
  },
  "host": "https://api-album-review.herokuapp.com",
  "basePath": "/",
  "tags": [
    {
      "name": "Albums",
      "description": "Endpoints com infos sobre os albums da nossa base de dados."
    },
    {
      "name": "Artists",
      "description": "Endpoints que retornam infos de artistas cadastrados na base de dados."
    },
    {
      "name": "Users",
      "description": "Endpoints para cadastro e login de usuários."
    },
    {
      "name": "Reviews",
      "description": "Endpoints para postagem de reviews."
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "securityDefinitions": {
    "JWT": {
      "description": "JWT token",
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/": {
      "get": {
        "description": "",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/v1/album": {
      "get": {
        "tags": [
          "Albums"
        ],
        "description": "Endpoint que retorna lista de albums cadastrados\"   \n   try {   const albums = await AlbumsService. ();     if (!albums) {   return res.status(404).json(",
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/album/{albumId}": {
      "get": {
        "tags": [
          "Albums"
        ],
        "description": "Endpoint que retorna album por Id.\"   \n   const albumId = req.params.albumId;     try {   const album = await AlbumsService.getAlbumById(albumId);   res.json(album);   } catch (error) {   res.status(500).json(error.message);   }  };    exports.getAll = (req, res) => {   \n   \n#swagger.tags = [",
        "parameters": [
          {
            "name": "albumId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/album/{artistId}": {
      "post": {
        "tags": [
          "Albums"
        ],
        "description": "Endpoint para cadastrar novos albums.\"   \n   try {   const {   album,   name,   description,   year,   label,   producer,   sales,   streams,   imgUrl,   date,   } = req.body;     const newAlbum = new Album({   album: album,   name: name,   artist: req.params.artistId,   description: description,   year: year,   label: label,   producer: producer,   sales: sales,   streams: streams,   imgUrl: imgUrl,   date: date,   });     const artist = await Artist.findById(req.params.artistId);     const session = await mongoose.startSession();   session.startTransaction();   await newAlbum.save({ session: session });   artist.albums.push(newAlbum);   await artist.save({ session: session });   await session.commitTransaction();     res.status(201).json({ album: newAlbum });   } catch (error) {   res.status(500).json({ error: error });   }  };    exports.update = (req, res) => {   \n   \n#swagger.tags = [",
        "parameters": [
          {
            "name": "artistId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "x-auth-token",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/album/{id}": {
      "put": {
        "tags": [
          "Albums"
        ],
        "description": "Endpoint que atualiza infos de determinado album.\"   \n   let id = req.params.id;     try {   const album = {};   album.name = req.body.name;   album.artist = req.body.artist;   album.description = req.body.description;   album.year = req.body.year;   album.label = req.body.label;   album.producer = req.body.producer;   album.sales = req.body.sales;   album.streams = req.body.streams;   album.imgUrl = req.body.imgUrl;   album.date = req.body.date;     const   = await AlbumsService. (id, album);     if ( .nModified === 0) {   return res.status(404).json({});   }     res.json( );   } catch (error) {   res.status(500).json({ error: error });   }  };    exports.delete = (req, res) => {    \n   \n#swagger.tags = [",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {}
      },
      "delete": {
        "tags": [
          "Albums"
        ],
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {}
      }
    },
    "/api/v1/artist": {
      "get": {
        "tags": [
          "Artists"
        ],
        "description": "Endpoint que retorna lista de artistas cadastrados\"   \n   try {   const artists = await ArtistService. ();     if (!artists) {   return res.status(404).json(",
        "parameters": [],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Artists"
        ],
        "description": "Endpoint para cadastrar novos artistas.\"   \n   try {   let artist = await Artist.findOne({ name: req.body.name });   if (artist) return res.status(400).send(",
        "parameters": [
          {
            "name": "x-auth-token",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/artist/{artistId}": {
      "get": {
        "tags": [
          "Artists"
        ],
        "description": "Endpoint que retorna artista por Id.\"   \n   try {   const { artistId } = req.params;     const artist = await Artist.findById(artistId).populate(",
        "parameters": [
          {
            "name": "artistId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {}
      }
    },
    "/api/v1/signup": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint que cadastra um novo usuário.\"   \n   const { name, email, password } = req.body;     try {   let user = await User.findOne({ email: email });     if (user) {   return res.status(400).send(",
        "parameters": [],
        "responses": {}
      }
    },
    "/api/v1/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "Endpoint de login na base de dados.\"   \n   const { email, password } = req.body;     try {   let user = await User.findOne({ email: email });   if (!user) return res.status(400).send(",
        "parameters": [],
        "responses": {}
      }
    }
  }
}